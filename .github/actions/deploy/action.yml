name: Deploy
description: Deploy built docker image to a kubernetes namespace
inputs:
  environment-name:
    description: Environment to which the app is being deployed (staging, production, etc)
    required: true
  git-crypt-key:
    description: Base64 encoded git-crypt symmetric key
    required: true
  ecr-url:
    description: ECR endpoint url
    required: true
  kube-cert:
    description: Kubernetes service account ca.crt
    required: true
  kube-token:
    description: Kubernetes service account token
    required: true
  kube-cluster:
    description: Kubernetes service account cluster
    required: true
  kube-namespace:
    description: Kubernetes cluster namespace
    required: true

runs:
  using: "composite"
  steps:
    - name: Unlock git-crypt secrets
      uses: sliteteam/github-action-git-crypt-unlock@8b1fa3ccc81e322c5c45fbab261eee46513fd3f8
      env:
        GIT_CRYPT_KEY: ${{ inputs.git-crypt-key }}

    - name: Authenticate to the cluster
      env:
        KUBE_CERT: ${{ inputs.kube-cert }}
        KUBE_TOKEN: ${{ inputs.kube-token }}
        KUBE_CLUSTER: ${{ inputs.kube-cluster }}
        KUBE_NAMESPACE: ${{ inputs.kube-namespace }}
      shell: bash
      run: |
        echo "${KUBE_CERT}" > ca.crt
        kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
        kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
        kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
        kubectl config use-context ${KUBE_CLUSTER}

    - name: Update deployment image
      env:
        ECR_URL: ${{ inputs.ecr-url }}
        IMAGE_TAG: ${{ github.sha }}
      shell: bash
      run: envsubst < config/kubernetes/${{ inputs.environment-name }}/deployment.tpl > config/kubernetes/${{ inputs.environment-name }}/deployment.yml

    - name: Apply manifest files
      shell: bash
      run: kubectl apply -f config/kubernetes/${{ inputs.environment-name }}
